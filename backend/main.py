from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from datetime import timedelta
from models import UserInput, UserRegistration, UserLogin, UserResponse, Token, User
from database import engine, Base, SessionLocal
from auth import (
    verify_password, get_password_hash, authenticate_user, 
    create_access_token, get_current_user, get_db, ACCESS_TOKEN_EXPIRE_MINUTES,
    debug_database_users, get_user_by_email
)

# Create an instance of the FastAPI class.
app = FastAPI(title="BeautyFitness API")

# Add CORS middleware to allow frontend connections
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://127.0.0.1:5173", "http://localhost:3000"],  # React dev server ports
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Create database tables
Base.metadata.create_all(bind=engine)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_user(db: Session, user_registration: UserRegistration):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_registration.email}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    db_user = db.query(User).filter(User.email == user_registration.email).first()
    if db_user:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {user_registration.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        raise HTTPException(
            status_code=400,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    hashed_password = get_password_hash(user_registration.password)
    print(f"üîí –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_registration.email}")
    
    db_user = User(
        email=user_registration.email,
        hashed_password=hashed_password,
        name=user_registration.name
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_registration.email} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {db_user.id}")
    return db_user

# –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ENDPOINTS

@app.post("/register", response_model=UserResponse)
def register(user_registration: UserRegistration, db: Session = Depends(get_db)):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîç Registration attempt for: {user_registration.email}")
    
    try:
        user = create_user(db=db, user_registration=user_registration)
        print(f"‚úÖ Registration successful for: {user_registration.email}")
        return user
    except HTTPException as e:
        print(f"‚ùå Registration failed for {user_registration.email}: {e.detail}")
        raise e
    except Exception as e:
        print(f"‚ùå Unexpected registration error for {user_registration.email}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error during registration"
        )

@app.post("/token", response_model=Token)
def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞)"""
    print(f"üîç Token request for: {form_data.username}")
    
    user = authenticate_user(db, form_data.username, form_data.password)
    if not user:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ False, None, –∏–ª–∏ –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        print(f"‚ùå Token authentication FAILED for {form_data.username}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    print(f"‚úÖ Token granted for: {user.email}")
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.email}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@app.post("/login", response_model=Token)
def login(user_login: UserLogin, db: Session = Depends(get_db)):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –¥–ª—è –≤—Ö–æ–¥–∞ —Å JSON"""
    print(f"üîç Login attempt for: {user_login.email}")
    
    # –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    user_exists = get_user_by_email(db, user_login.email)
    if user_exists is None:
        print(f"‚ùå –û–¢–ö–ê–ó: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_login.email} –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
        )
    
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    user = authenticate_user(db, user_login.email, user_login.password)
    if user is None:
        print(f"‚ùå Authentication FAILED for {user_login.email}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π."
        )
    
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π user —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π
    if user.email != user_login.email:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: email –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
        )
    
    print(f"‚úÖ Login successful for: {user.email}")
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.email}, expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/me", response_model=UserResponse)
def read_users_me(current_user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return current_user

@app.get("/debug/users")
def debug_users(db: Session = Depends(get_db)):
    """–û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    users = debug_database_users(db)
    return {
        "total_users": len(users),
        "users": [{"id": u.id, "email": u.email, "name": u.name} for u in users],
        "database_file": "sql_app.db"
    }

@app.delete("/debug/reset-db")
def reset_database(db: Session = Depends(get_db)):
    """–û–¢–õ–ê–î–ö–ê: –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db.query(User).delete()
        db.commit()
        return {"message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞", "users_deleted": "all"}
    except Exception as e:
        db.rollback()
        return {"error": f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}"}

@app.post("/debug/test-login")
def debug_test_login(email: str, password: str, db: Session = Depends(get_db)):
    """–û–¢–õ–ê–î–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üîç Debug: Testing login for {email}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db.query(User).filter(User.email == email).first()
    if not user:
        return {"status": "user_not_found", "message": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    from auth import verify_password
    password_valid = verify_password(password, user.hashed_password)
    
    return {
        "status": "user_found",
        "user_email": user.email,
        "user_name": user.name,
        "password_valid": password_valid,
        "hashed_password_length": len(user.hashed_password)
    }

# –û–°–ù–û–í–ù–´–ï ENDPOINTS

# –û–°–ù–û–í–ù–´–ï ENDPOINTS

@app.get("/")
def read_root():
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    return {"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BeautyFitness API"}

@app.get("/health")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {"status": "healthy", "message": "BeautyFitness API is running"}

@app.post("/generate-program")
def generate_program(
    user_input: UserInput, 
    current_user: User = Depends(get_current_user)
):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–æ–≥—Ä–∞–º–º—ã (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
    program_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {current_user.name}! "
        f"–ú—ã —Å–æ–∑–¥–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ '{user_input.goal}' "
        f"–Ω–∞ —É—Ä–æ–≤–Ω–µ '{user_input.fitness_level}', "
        f"—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ '{user_input.frequency}'."
    )
    
    return {"program": program_message}